Index: src/components/Header.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useEffect, useState, useRef } from 'react';\r\nimport logo from '../assets/images/kkini_logo.png';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { debounce } from 'lodash';\r\nimport logout from \"./Logout\";\r\nimport getUserInfo from \"./GetUserInfo\";\r\n\r\nconst SERVER_URL = \"http://localhost:8080\";\r\n\r\nfunction Header({ searchTerm, setSearchTerm, autocompleteItems, setAutocompleteItems }) {\r\n    const [recentSearches, setRecentSearches] = useState([]);\r\n    const [errorMessage, setErrorMessage] = useState(null);\r\n    const navigate = useNavigate();\r\n    const dropdownRef = useRef(null);\r\n    const [user, setUser] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const storedSearches = JSON.parse(localStorage.getItem('recentSearches') || '[]');\r\n        setRecentSearches(storedSearches);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const handleClickOutside = (event) => {\r\n            if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\r\n                setAutocompleteItems([]);\r\n            }\r\n        };\r\n\r\n        document.addEventListener(\"mousedown\", handleClickOutside);\r\n        return () => {\r\n            document.removeEventListener(\"mousedown\", handleClickOutside);\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        getUserInfo().then(userData => setUser(userData));\r\n    }, []);\r\n\r\n    const handleSearchSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (searchTerm && !recentSearches.includes(searchTerm)) {\r\n            const newSearches = [...recentSearches, searchTerm];\r\n            setRecentSearches(newSearches);\r\n            localStorage.setItem('recentSearches', JSON.stringify(newSearches));\r\n        }\r\n\r\n        navigate(`/search-results?searchTerm=${searchTerm}`);\r\n    };\r\n\r\n    const debouncedFetch = debounce((value) => {\r\n        fetch(`${SERVER_URL}/api/products/autocomplete?searchTerm=${encodeURIComponent(value)}`)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    return null;\r\n                }\r\n                return response.json();\r\n            })\r\n            .then(data => {\r\n                if (data && Array.isArray(data)) {\r\n                    const uniqueItems = [...new Set(data)];\r\n                    setAutocompleteItems(uniqueItems);\r\n                } else {\r\n                    setAutocompleteItems([]);\r\n                }\r\n            })\r\n            .catch(() => {\r\n                setAutocompleteItems([]);\r\n            });\r\n    }, 1000);\r\n\r\n    const handleInputChange = (e) => {\r\n        const value = e.target.value;\r\n        setSearchTerm(value);\r\n\r\n        if (value.length < 2) {\r\n            setErrorMessage(\"검색어는 최소 2자 이상이어야 합니다.\");\r\n            setAutocompleteItems([]);\r\n            return;\r\n        } else {\r\n            setErrorMessage(null);\r\n        }\r\n\r\n        debouncedFetch(value);\r\n    }\r\n\r\n    const handleItemClick = (productName) => {\r\n        setSearchTerm(productName);\r\n        setAutocompleteItems([]);\r\n        navigate(`/search-results?searchTerm=${productName}`);\r\n    };\r\n\r\n    const handleLogout = async (e) => {\r\n        e.preventDefault();\r\n        await logout();\r\n        setUser(null);\r\n        navigate('/');\r\n    };\r\n\r\n\r\n    return (\r\n        <header className=\"header\">\r\n            <img src={logo} className=\"logo\" alt=\"kkini logo\" onClick={() => navigate('/')}/>\r\n            <div className=\"search-bar\">\r\n                <form onSubmit={handleSearchSubmit}>\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        placeholder=\"Enter product name\"\r\n                        value={searchTerm}\r\n                        onChange={handleInputChange}\r\n                        list=\"recentSearches\"\r\n                        autoComplete=\"off\"\r\n                    />\r\n                    {errorMessage && <div className=\"error-message\">{errorMessage}</div>}\r\n                    <input type=\"submit\" value=\"Search\" />\r\n                </form>\r\n            </div>\r\n            <div className=\"nav-icons\">\r\n                <span className=\"icon\" onClick={() => user ? navigate('/user') : navigate('/login')}>\uD83D\uDC64</span>\r\n                <span className=\"icon\"> ♥ </span>\r\n            </div>\r\n            <div className=\"nav-links\">\r\n                {user ? (\r\n                    <a href=\"\" onClick={(e) => handleLogout(e)}>로그아웃</a>\r\n                ) : (\r\n                    <a href=\"\" onClick={() => navigate('/login')}>로그인</a>\r\n                )}\r\n                <a href=\"#\">소개</a>\r\n                <a href=\"#\">도움말</a>\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/Header.js b/src/components/Header.js
--- a/src/components/Header.js	
+++ b/src/components/Header.js	
@@ -4,6 +4,13 @@
 import { debounce } from 'lodash';
 import logout from "./Logout";
 import getUserInfo from "./GetUserInfo";
+// import logout from "./Logout";
+// import getUserInfo from "./GetUserInfo";
+import IsLogin from "./IsLogin";
+import MyPageIcon from "./MyPageIcon";
+import handleLogoutButton from "./HandleLogoutButton";
+// import useFetchUserInfo from "./UseFetchUserInfo";
+import {useUser} from "./UserContext";
 
 const SERVER_URL = "http://localhost:8080";
 
@@ -12,7 +19,7 @@
     const [errorMessage, setErrorMessage] = useState(null);
     const navigate = useNavigate();
     const dropdownRef = useRef(null);
-    const [user, setUser] = useState(null);
+    const { user, setUser } = useUser();
 
     useEffect(() => {
         const storedSearches = JSON.parse(localStorage.getItem('recentSearches') || '[]');
@@ -31,10 +38,6 @@
             document.removeEventListener("mousedown", handleClickOutside);
         };
     }, []);
-
-    useEffect(() => {
-        getUserInfo().then(userData => setUser(userData));
-    }, []);
 
     const handleSearchSubmit = (e) => {
         e.preventDefault();
@@ -88,14 +91,7 @@
         setAutocompleteItems([]);
         navigate(`/search-results?searchTerm=${productName}`);
     };
-
-    const handleLogout = async (e) => {
-        e.preventDefault();
-        await logout();
-        setUser(null);
-        navigate('/');
-    };
-
+    const handleLogout = handleLogoutButton(navigate,setUser);
 
     return (
         <header className="header">
@@ -125,6 +121,11 @@
                 ) : (
                     <a href="" onClick={() => navigate('/login')}>로그인</a>
                 )}
+                <MyPageIcon user={user} navigate={navigate} />
+                <span className="icon"> ♥ </span> {/* 찜하기 아이콘 */}
+            </div>
+            <div className="nav-links">
+                <IsLogin user={user} navigate={navigate} handleLogout={handleLogout} />
                 <a href="#">소개</a>
                 <a href="#">도움말</a>
             </div>
